{
    "collab_server" : "",
    "contents" : "performCV <- function(cv_data,r = 10^c(-2,-1,0,1,2),s = 10^c(-1,1,2,3,4), \n                      stop_cond = 10^-7, only_PAFit = TRUE, \n                      silent = FALSE, only_linear = FALSE) { \n  ratio_vec_PAFit   <- r\n  rate_PAFit        <- s\n  ratio_vec_PA      <- ratio_vec_PAFit\n  rate_Fit          <- rate_PAFit  \n  PAFit_each        <- matrix(0,nrow = length(ratio_vec_PAFit), ncol = length(rate_PAFit))\n  rownames(PAFit_each) <- ratio_vec_PAFit\n  colnames(PAFit_each) <- rate_PAFit\n  Fit_each_linear   <- rep(0,length(rate_Fit))\n  names(Fit_each_linear) <- rate_Fit\n  PA_each           <- rep(0,length(ratio_vec_PA))\n  names(PA_each)    <- ratio_vec_PA\n  Fit_each          <- rep(0,length(rate_Fit))\n  names(Fit_each)   <- rate_Fit\n  alpha_each        <- rep(0,length(rate_PAFit))\n  names(alpha_each) <- rate_PAFit\n  FitMultinomial <- function(true,dat){\n    true[true == 0] <- 1\n    return(sum(dat*log(true)))\n  }\n  count <- 0\n  total <- length(ratio_vec_PAFit) * length(rate_PAFit) + (!only_PAFit) *\n    (2 * length(rate_PAFit) + length(ratio_vec_PAFit) + (!only_linear)*rate_PAFit)[1]\n  #Full model\n  if (!only_linear)\n  for (i in 1:length(ratio_vec_PAFit))\n    for (j in 1:length(rate_PAFit)){\n      count <- count + 1\n      if (silent == FALSE)\n          print(paste0(\"Processing case \",count, \" of \",total))\n      result_PAFit <- PAFit(cv_data$stats,s = rate_PAFit[j], r = ratio_vec_PAFit[i], auto_stop =  TRUE, \n                            stop_cond = stop_cond, normalized_f = FALSE)   \n      for (k in 1:length(cv_data$m_each))\n        if (cv_data$m_each[k] != 0) { \n          prob_PAFit      <- result_PAFit$A[cv_data$deg_each[k,] + 1]* result_PAFit$f[as.character(cv_data$stats$f_position)]; \n          prob_PAFit      <- prob_PAFit / sum(prob_PAFit,na.rm = TRUE); \n          prob_PAFit[sapply(prob_PAFit,is.na)] <- 0; \n          PAFit_each[i,j] <-PAFit_each[i,j] + \n            FitMultinomial(true = as.vector(prob_PAFit), dat = as.vector(cv_data$prob_em_each[k,] * cv_data$m_each[k])) ;\n        }\n    }\n  #linear A\n  if (FALSE == only_PAFit)\n  if (length(rate_Fit) > 0) {\n    for (i in 1:length(rate_Fit)) {\n      count <- count + 1\n      if (silent == FALSE)\n          print(paste0(\"Processing case \",count, \" of \",total))\n      result_PAFit <- PAFit(cv_data$stats, mode_f = \"Linear_PA\", only_f = TRUE,s = rate_Fit[i], auto_stop =  TRUE, \n                            stop_cond = stop_cond,normalized_f = FALSE)     \n      for (k in 1:length(cv_data$m_each)) \n        if (cv_data$m_each[k] != 0) {\n          prob_PAFit      <- result_PAFit$f[as.character(cv_data$stats$f_position)] *\n                             pmax(cv_data$deg_each[k,],1)  \n          prob_PAFit      <- prob_PAFit / sum(prob_PAFit,na.rm = TRUE)\n          prob_PAFit[sapply(prob_PAFit,is.na)] <- 0\n          Fit_each_linear[i] <-Fit_each_linear[i] + FitMultinomial(true = as.vector(prob_PAFit), \n                                                                   dat = as.vector(cv_data$prob_em_each[k,] * cv_data$m_each[k]))\n        }\n      \n    }  \n  }\n  if (!only_linear)\n  #Only PA\n  if (FALSE == only_PAFit)\n  if (length(ratio_vec_PA) > 0) {\n    for (i in 1:length(ratio_vec_PA)) {\n      count <- count + 1\n      if (silent == FALSE)\n          print(paste0(\"Processing case \",count, \" of \",total))\n      result_PAFit <- PAFit(cv_data$stats, only_PA = TRUE, auto_lambda = TRUE, r = ratio_vec_PA[i], auto_stop =  TRUE, \n                            stop_cond = stop_cond,normalized_f = FALSE)\n      \n      for (k in 1:length(cv_data$m_each)) \n        if (cv_data$m_each[k] != 0) {\n          prob_PAFit      <- result_PAFit$A[cv_data$deg_each[k,] + 1]\n          prob_PAFit      <- prob_PAFit / sum(prob_PAFit,na.rm = TRUE)\n          prob_PAFit[sapply(prob_PAFit,is.na)] <- 0\n          PA_each[i] <- PA_each[i] + FitMultinomial(true = as.vector(prob_PAFit), dat = as.vector(cv_data$prob_em_each[k,] * cv_data$m_each[k]))\n        }\n    }\n  }\n  # Only f\n  if (!only_linear)\n  if (FALSE == only_PAFit)\n  if (length(rate_Fit) > 0) {\n    for (i in 1:length(rate_Fit)) {\n      count <- count + 1\n      if (silent == FALSE)\n          print(paste0(\"Processing case \",count, \" of \",total))\n      result_PAFit <- PAFit(cv_data$stats, mode_f = \"Constant_PA\", only_f = TRUE,s = rate_Fit[i], auto_stop =  TRUE, \n                            stop_cond = stop_cond,normalized_f = FALSE)     \n      for (k in 1:length(cv_data$m_each)) \n        if (cv_data$m_each[k] != 0) {\n          prob_PAFit      <- result_PAFit$f[as.character(cv_data$stats$f_position)] \n          prob_PAFit      <- prob_PAFit / sum(prob_PAFit,na.rm = TRUE)\n          prob_PAFit[sapply(prob_PAFit,is.na)] <- 0\n          Fit_each[i]     <-Fit_each[i] + FitMultinomial(true = as.vector(prob_PAFit), dat = as.vector(cv_data$prob_em_each[k,] * cv_data$m_each[k]))\n        }\n    }\n  }\n  #k^alpha\n  if (!only_linear)\n  if (FALSE == only_PAFit)\n  for (j in 1:length(rate_PAFit)) {\n    count <- count + 1\n    if (silent == FALSE)\n        print(paste0(\"Processing case \",count, \" of \",total))\n    result_PAFit <- PAFit(cv_data$stats, mode_f = \"Log_linear\",s = rate_PAFit[j],\n                          auto_stop =  TRUE, stop_cond = stop_cond,normalized_f = FALSE);\n    for (k in 1:length(cv_data$m_each)) \n      if (cv_data$m_each[k] != 0) {\n       \n        \n        prob_PAFit      <- result_PAFit$A[cv_data$deg_each[k,] + 1] * result_PAFit$f[as.character(cv_data$stats$f_position)] \n        \n        prob_PAFit      <- prob_PAFit / sum(prob_PAFit,na.rm = TRUE) \n        \n        prob_PAFit[sapply(prob_PAFit,is.na)] <- 0 \n        \n        alpha_each[j] <- alpha_each[j] + \n          FitMultinomial(true = as.vector(prob_PAFit), dat = as.vector(cv_data$prob_em_each[k,] * cv_data$m_each[k])) \n      }\n  }\n  max_id    <- which.max(PAFit_each)[1]\n  r_index   <- max_id %% length(r)\n  if (r_index == 0)\n      r_index == 1\n  s_index   <- ceiling(max_id / length(s))\n  r_optimal <- r[r_index]\n  s_optimal <- s[s_index]\n  result    <- list(PAFit_each = PAFit_each, Fit_each_linear = Fit_each_linear, PA_each = PA_each, \n                    Fit_each = Fit_each, alpha_each = alpha_each, r_optimal = r_optimal, s_optimal = s_optimal)\n  class(result) <- \"CV_Result\"\n  if(FALSE == silent) {\n      print(paste0(\"Optimal r parameter is: \",r_optimal));\n      print(paste0(\"Optimal s parameter is: \",s_optimal));\n  }\n  return(result)\n}\n\n\n",
    "created" : 1484904230834.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3603359573",
    "id" : "4D792E5E",
    "lastKnownWriteTime" : 1482389136,
    "last_content_update" : 1482389136,
    "path" : "~/Dropbox/1- Program/PAFit/PAFit/R/performCV.R",
    "project_path" : "R/performCV.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}