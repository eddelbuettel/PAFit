{
    "collab_server" : "",
    "contents" : "# function to plot estimation results  2015-3-12 Thong Pham\nplot.PAFit <-\nfunction(x,data,true_f = NULL, plot = c(\"A\",\"f\",\"true_f\"), plot_bin = TRUE,\n         line = FALSE, confidence = TRUE, high_deg = NULL, shade_point = 0.5, shade_interval = 0.5, \n         max_A = NULL, \n         min_A = NULL, f_min = NULL, \n         f_max = NULL, plot_true_degree = FALSE, \n         label_x = NULL, label_y = NULL,\n         col_interval = \"lightsteelblue\",col_point = \"black\",...) {\n  if (plot_bin == TRUE) {\n      x$k <- x$center_k\n      x$A <- x$theta\n      x$upper_A <- x$upper_bin\n      x$lower_A <- x$lower_bin\n  } \n  if (\"A\" == plot[1]) {\n      if (!is.null(high_deg))\n          non_zero <- which(x$A > 10^-20 & x$k >= max(x$deg_threshold,high_deg))\n      else \n          non_zero <- which(x$A > 10^-20 & x$k >= x$deg_threshold) \n      new_var_log <- x$var_logA[non_zero]*(x$A[non_zero][1]) ^ 2;\n      if (!is.null(high_deg)) {\n          x$A[non_zero] <- x$A[non_zero] / x$A[non_zero][1];    \n          x$lower_A[non_zero] <- exp(log(x$A[non_zero]) - 2*sqrt(new_var_log));\n          x$upper_A[non_zero] <- exp(log(x$A[non_zero]) + 2*sqrt(new_var_log));\n      } \n     if ((!is.null(max_A)) && (!is.null(min_A)))\n          limit <- c(min(min_A,x$lower_A[non_zero]),max(max_A,x$upper_A[non_zero]))\n      else if (!is.null(min_A))\n          limit <- c(min(min_A,x$lower_A[non_zero]),max(x$upper_A[non_zero])) \n      else if (!is.null(max_A))\n          limit <- c(min(x$lower_A[non_zero]),max(max_A,x$upper_A[non_zero]))\n      else \n          limit <- c(min(x$lower_A[non_zero]),max(x$upper_A[non_zero]))\n    \n      xlim  <- c(min(x$k[non_zero] + 1),max(x$k[non_zero] + 1))\n      plot(x$k[non_zero][1] + 1,x$A[non_zero][1],xlab = ifelse(!is.null(label_x),label_x,expression(k + 1)),\n           ylab = ifelse(!is.null(label_y),label_y,expression(hat(A)[k])),\n           xlim = xlim, ylim = limit,log = \"xy\",col = col_point, ...)\n      #xtick = seq(from = xlim[1], to = xlim[2],5)\n      #axis(side = 1, at = xtick, labels = NULL, xlim = xlim, log = \"x\")\n      if (TRUE == confidence) {\n          order    <- order(x$k[non_zero] + 1)\n          upper_f  <- x$upper_A[non_zero][order]\n          lower_f  <- x$lower_A[non_zero][order]\n          unique_x <- unique((x$k[non_zero] + 1)[order])\n          upper_u  <- rep(0,length(unique_x))\n          lower_u  <- upper_u    \n          for (jjj in 1:length(unique_x)) {\n            uu           <- which((x$k[non_zero] + 1)[order] == unique_x[jjj])\n            #print(uu)\n            upper_u[jjj] <- max(upper_f[uu])\n            lower_u[jjj] <- min(lower_f[uu])\n          }\n          my_col <- as.vector(col2rgb(col_interval))\n          my_col <- my_col / 255\n          polygon(c(unique_x,rev(unique_x)),c(upper_u,rev(lower_u)), col = rgb(my_col[1],my_col[2],my_col[3],shade_interval),border = NA) \n          #arrows(x0 = x$k[non_zero] + 1, y0 = x$lower_A[non_zero], \n          #       x1 = x$k[non_zero] + 1, y1 = x$upper_A[non_zero], code = 3,angle = 90, \n          #       length = 0,\n          #       col = rgb(0,0,0,shade_interval))\n      }\n          points(x$k[non_zero] + 1,x$A[non_zero], col = col_point,...)\n      if (TRUE == line) {\n          alpha <- x$alpha\n          beta <-  x$linear_fit$coefficients[1]\n          lines(x$k[non_zero],exp(beta)*(x$k[non_zero])^alpha,lwd= 2)\n      }\n  }\n  else if (\"f\" == plot[1]) {\n      if (FALSE == is.null(high_deg))\n          non_zero <- x$lower_f > 10^-20 & data$increase >= high_deg\n      else\n          non_zero <- x$lower_f > 10^-20 & data$increase > 0\n      if (length(non_zero) <= 0)\n        stop(\"There is no data. Please decrease high_deg\") \n      if (TRUE == confidence)\n          lim_y = c(min(x$lower_f[non_zero]), \n                    max(x$upper_f[non_zero]))\n      else lim_y = c(min(x$f[non_zero]),max(x$f[non_zero]))\n      xlim <- c(min(data$increase[non_zero])+1,max(data$increase[non_zero]))\n      plot(data$increase[non_zero][1],x$f[non_zero][1],log=\"xy\",ylab = \"Estimated fitness\",xlim = xlim, \n           ylim = lim_y, xlab = \"Number of edges acquired\",...)\n      if (TRUE == confidence) {\n          order   <- order(data$increase[non_zero])\n          upper_f <- x$upper_f[non_zero][order]\n          lower_f <- x$lower_f[non_zero][order]\n          unique_x <- unique(data$increase[non_zero][order])\n          upper_u  <- rep(0,length(unique_x))\n          lower_u  <- upper_u  \n        for (jjj in 1:length(unique_x)) {\n          uu           <- which(data$increase[non_zero][order] == unique_x[jjj])\n          #print(uu)\n          upper_u[jjj] <- max(upper_f[uu])\n          lower_u[jjj] <- min(lower_f[uu])\n        }  \n          my_col <- as.vector(col2rgb(col_interval))\n          my_col <- my_col / 255\n          polygon(c(unique_x,rev(unique_x)),c(upper_u,rev(lower_u)), col = rgb(my_col[1],my_col[2],my_col[3],shade_interval),\n                  border = NA)    \n          #arrows(x0 = data$increase[non_zero], y0 = x$lower_f[non_zero], x1 = data$increase[non_zero], \n          #       y1 = x$upper_f[non_zero], code = 3,angle = 90, length = 0,col = rgb(0,0,0,shade_interval))\n      }\n      points(data$increase[non_zero],x$f[non_zero],pch = 20,col = rgb(0,0,0,shade_point),...)\n      abline(h = 1)\n  }\n  else if (\"true_f\" == plot[1]) {\n          #names(true_f) <- data$node_id \n          #true_f        <-  true_f[names(x$f)] \n          true_f1   <- length(true_f[data$node_id][data$f_position])*true_f[data$node_id][data$f_position]/\n                       sum(true_f[data$node_id][data$f_position])\n          if (FALSE == is.null(high_deg)) {\n              non_zero <- x$lower_f[data$f_position] > 10^-20 & true_f1 > 10^-20 & data$increase[data$f_position] > high_deg\n          } else\n              non_zero <- x$lower_f[data$f_position] > 10^-20 & true_f1 > 10^-20 \n          if (length(non_zero) <= 0)\n             stop(\"There is no data. Please decrease high_deg\")  \n          #print(non_zero)\n          b        <- lm(true_f1[non_zero] ~ 0 + x$f[data$f_position][non_zero])$coefficients[1]\n          upper_f <-  exp(log(b*x$f[data$f_position][non_zero]) + 2 * sqrt(x$var_f[data$f_position][non_zero] / x$f[data$f_position][non_zero] ^ 2))\n          lower_f <-  exp(log(b*x$f[data$f_position][non_zero]) - 2 * sqrt(x$var_f[data$f_position][non_zero] / x$f[data$f_position][non_zero] ^ 2))\n          \n          #print(lower_f)\n          #print(\"---\")\n          #print(upper_f)\n          if ((!is.null(f_min)) && (!is.null(f_max))) {\n              if (TRUE == confidence)  \n                  xlim <- c(min(c(f_min,lower_f,true_f1[non_zero])), max(c(f_max,upper_f,true_f1)))\n              else xlim <- c(min(c(f_min,true_f1[non_zero])), max(c(f_max,true_f1)))\n          }\n          else  if (!is.null(f_max)) {\n              if (TRUE == confidence)    \n                  xlim <- c(min(c(lower_f,true_f1[non_zero])), max(c(f_max,upper_f,true_f1)))\n              else xlim <- c(min(c(true_f1[non_zero])), max(c(f_max,true_f1)))\n          }    \n          else if (!is.null(f_min)) {\n              if (TRUE == confidence)  \n                  xlim <- c(min(c(f_min,lower_f,true_f1[non_zero])), max(c(upper_f,true_f1)))  \n              else xlim <- c(min(c(f_min,true_f1[non_zero])), max(c(true_f1)))  \n          }\n          else {   \n              if (TRUE == confidence)  \n                  xlim <- c(min(c(lower_f,true_f1[non_zero])), max(c(upper_f,true_f1)))  \n              else  xlim <- c(min(c(true_f1[non_zero])), max(c(true_f1)))  \n          }\n          #print(xlim)          \n          ylim <- xlim\n          plot(true_f1[non_zero][1], b*x$f[data$f_position][non_zero][1], xlim= xlim, ylim = ylim,\n                ylab= \"Estimated fitness\",xlab = \"True fitness\",log = \"xy\", pch =\"\",...)\n          if (TRUE == confidence) {\n              #x_point <- c(true_f1[non_zero],rev(true_f1[non_zero]))\n              #y_point <- c(upper_f, rev(lower_f))\n              order   <- order(true_f1[non_zero])\n              upper_f <- upper_f[order]\n              lower_f <- lower_f[order]\n              unique_x <- unique(true_f1[non_zero][order])\n              upper_u  <- rep(0,length(unique_x))\n              lower_u  <- upper_u  \n              for (jjj in 1:length(unique_x)) {\n                  uu           <- which(true_f1[non_zero][order] == unique_x[jjj])\n                  #print(uu)\n                  upper_u[jjj] <- max(upper_f[uu])\n                  lower_u[jjj] <- min(lower_f[uu])\n              }\n              my_col <- as.vector(col2rgb(col_interval))\n              my_col <- my_col / 255\n              polygon(c(unique_x,rev(unique_x)),c(upper_u,rev(lower_u)), col = rgb(my_col[1],my_col[2],my_col[3], alpha = shade_interval),border = NA)  \n              #arrows(y0 = lower_f, x0 = true_f1[non_zero], y1 = upper_f, x1 = true_f1[non_zero], code = 3,angle = 90, length = 0,\n              #       col = rgb(0,0,0,shade_interval))\n          }\n          abline(a=0,b = 1)\n          if (FALSE == plot_true_degree) {\n              points(true_f1[non_zero],b*x$f[data$f_position][non_zero],pch = 20,col = rgb(0,0,0,shade_point),...) \n          }\n          else {  \n              points(b*x$f[data$f_position][non_zero],true_f1[non_zero],pch =\"\",...)\n              col <- brewer.pal(9,\"Greens\")\n              order <- order(data$increase[data$f_position][non_zero])\n              col_seq <- seq(min(data$increase[data$f_position][non_zero]),\n                         max(data$increase[data$f_position][non_zero]),9)\n              a <- sapply(data$increase[data$f_position][non_zero], function(x)which(col_seq >= x)[1])\n              a[is.na(a)] <- 9\n              text(b*x$f[data$f_position][non_zero],true_f1[non_zero],data$increase[data$f_position][non_zero],col = col[a],...) \n          }\n      }\n}\n",
    "created" : 1476749746987.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2921014603",
    "id" : "E7B4887B",
    "lastKnownWriteTime" : 1479356074,
    "last_content_update" : 1479356074085,
    "path" : "~/Dropbox/1- Program/PAFit/PAFit/R/plot.pafit.r",
    "project_path" : "R/plot.pafit.r",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}